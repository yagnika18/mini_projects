import cv2  # Import OpenCV library

# Load the Haar Cascade classifier for frontal face detection
face_cap = cv2.CascadeClassifier(
    "C:/Users/Admin/AppData/Local/Programs/Python/Python313/Lib/site-packages/cv2/data/haarcascade_frontalface_default.xml"
)

# Start capturing video from the default webcam (0 = first camera)
video_cap = cv2.VideoCapture(0)

# Infinite loop to read frames continuously from the webcam
while True:
    # Read a frame from the webcam
    ret, video_data = video_cap.read()

    # Convert the frame to grayscale (Haar Cascade works better on grayscale)
    col = cv2.cvtColor(video_data, cv2.COLOR_BGR2GRAY)

    # Detect faces in the grayscale frame
    faces = face_cap.detectMultiScale(
        col,                     # Input image
        scaleFactor=1.1,         # Reduce image size by 10% each time (detects different face sizes)
        minNeighbors=5,          # Number of neighbors each candidate rectangle should have to retain it
        minSize=(30, 30),        # Minimum possible object size (ignores smaller objects)
        flags=cv2.CASCADE_SCALE_IMAGE  # Optimization flag for scale image
    )

    # Draw rectangles around each detected face
    for (x, y, w, h) in faces:
        # Draw a green rectangle (BGR color: (0, 255, 0)) with thickness 2
        cv2.rectangle(video_data, (x, y), (x + w, y + h), (0, 255, 0), 2)

    # Show the frame with detected faces in a window titled "video_live"
    cv2.imshow("video_live", video_data)

    # Wait for 10 milliseconds and check if the key 'a' is pressed (ASCII)
    if cv2.waitKey(10) == ord("a"):
        break  # Exit the loop if 'a' key is pressed

# Release the webcam resource
video_cap.release()

# Close all OpenCV windows
cv2.destroyAllWindows()
